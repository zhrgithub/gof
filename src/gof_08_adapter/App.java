package gof_08_adapter;

/**
 * 适配器模式：通过做接口的转换达到适配的目的
 *
 * <p>类适配器优点： 1、将目标类和适配者类解耦 2、增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性
 * 3、灵活性和扩展性都非常好，符合开闭原则 4、由于适配器类是适配者类的子类，因此可以再适配器类中置换一些适配者的方法，使得适配器的灵活性更强。
 *
 * <p>类适配器缺点：
 * 1、对于Java、C#等不支持多重继承的语言，一次最多只能适配一个适配者类，而且目标抽象类只能为接口，不能为类，其使用有一定的局限性，不能将一个适配者类和他的子类同时适配到目标接口。
 *
 * <p>对象适配器的优点： 1、把多个不同的适配者适配到同一个目标，也就是说，同一个适配器可以把适配者类和他的子类都适配到目标接口。
 *
 * <p>对象适配的缺点： 1、与类适配器模式相比，要想置换适配者类的方法就不容易。
 *
 * @author zhr
 */
public class App {
  public static void main(String[] args) {
    IUserInfo iUserInfo = new OuterUserInfoAdapter();

    for (int i = 0; i < 101; i++) {
      System.out.println(iUserInfo.getMobileNumber());
    }
  }
}
